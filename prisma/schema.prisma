generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  memberships Member[] // Organisations user is part of
  sessions    Session[]

  @@map("user")
}

model Organisation {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members        Member[]
  sessions       Session[]
  socialAccounts SocialAccount[]

  @@map("organisation")
}

model Member {
  id        String   @id @default(uuid())
  role      Role     @default(MEMBER)
  isOwner   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId String

  scheduledPosts ScheduledPost[]

  @@unique([userId, organisationId]) // User can only have one role per organisation
  @@map("member")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  // Relations
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organisation   Organisation? @relation(fields: [organisationId], references: [id], onDelete: SetNull)
  organisationId String?

  @@index([userId])
  @@map("session")
}

model SocialAccount {
  id           String         @id @default(uuid())
  platform     SocialPlatform
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean        @default(true)

  // Relations
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId String

  posts ScheduledPost[]

  @@unique([organisationId, platform])
  @@map("social_account")
}

model ScheduledPost {
  id           String     @id @default(uuid())
  content      String
  scheduledFor DateTime
  status       PostStatus @default(DRAFT)
  publishedAt  DateTime?
  errorMessage String?

  // Relations
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  socialAccountId String

  // Optional relation to track which user created the post
  createdBy   Member @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  // attachments   PostAttachment[]

  @@map("scheduled_post")
}

// model PostAttachment {
//   id            String          @id @default(uuid())
//   type          String          // e.g., 'image', 'video'
//   url           String
//   originalName  String?

//   // Relations
//   scheduledPost ScheduledPost   @relation(fields: [scheduledPostId], references: [id], onDelete: Cascade)
//   scheduledPostId String

//   @@map("post_attachment")
// }

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum SocialPlatform {
  LINKEDIN
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}
